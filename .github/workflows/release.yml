name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write  # Required for trusted publishing to PyPI

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Validate tag format
      run: |
        if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "Invalid tag format: ${{ github.ref_name }}"
          echo "Expected format: v1.2.3 or v1.2.3-beta.1"
          exit 1
        fi

  test:
    name: Run Tests Before Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Run tests
      run: uv run pytest --cov=bvd tests/

    - name: Lint code
      run: uv run ruff check src/ tests/

    - name: Check formatting
      run: uv run ruff format --check src/ tests/

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Update version in pyproject.toml
      if: github.event_name == 'push'
      run: |
        VERSION="${{ github.ref_name }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix
        sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
        echo "Updated version to $VERSION"

    - name: Update version in pyproject.toml (manual)
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION="${{ github.event.inputs.version }}"
        VERSION="${VERSION#v}"  # Remove 'v' prefix if present
        sed -i "s/^version = .*/version = \"$VERSION\"/" pyproject.toml
        echo "Updated version to $VERSION"

    - name: Build package
      run: uv build

    - name: Verify build
      run: |
        ls -la dist/
        uv pip install dist/*.whl
        python -c "import bvd; print(f'Successfully imported bvd')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/bvd

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        attestations: true

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/bvd

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        attestations: true

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, publish-pypi]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git tag --sort=-version:refname | grep -v "${{ github.ref_name }}" | head -n 1)

        if [ -n "$PREV_TAG" ]; then
          echo "## Changes since $PREV_TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..${{ github.ref_name }} >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "First release of BVD (Breaking Version Detector)" >> CHANGELOG.md
        fi

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ github.ref_name }}
        body: ${{ steps.changelog.outputs.changelog }}
        files: dist/*
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}
        generate_release_notes: true
