name: Security

on:
  schedule:
    # Run security scans weekly on Mondays at 2 AM UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Install safety
      run: uv add --dev safety

    - name: Run safety check
      run: uv run safety check --json --output safety-report.json || true

    - name: Upload safety report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-report
        path: safety-report.json

    - name: Install pip-audit
      run: uv add --dev pip-audit

    - name: Run pip-audit
      run: uv run pip-audit --format=json --output=pip-audit-report.json || true

    - name: Upload pip-audit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pip-audit-report
        path: pip-audit-report.json

  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Install bandit
      run: uv add --dev bandit

    - name: Run bandit security scan
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run bandit -r src/ -f txt || true

    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  semgrep:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
        generateSarif: "1"

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: semgrep.sarif
      if: always()

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  secrets-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Generate SBOM
      run: |
        uv add --dev cyclonedx-bom
        uv run cyclonedx-py -o sbom.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.json

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Set up Python
      run: uv python install 3.12

    - name: Install dependencies
      run: uv sync --dev

    - name: Install pip-licenses
      run: uv add --dev pip-licenses

    - name: Check licenses
      run: |
        uv run pip-licenses --format=json --output-file=licenses.json
        uv run pip-licenses --format=plain-vertical

    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, semgrep, codeql, secrets-scan, supply-chain, license-check]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v5

    - name: Create security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "Security scans completed on $(date)" >> security-summary.md
        echo "" >> security-summary.md

        for job in dependency-scan code-scan semgrep codeql secrets-scan supply-chain license-check; do
          if [ "${{ needs.$job.result }}" = "success" ]; then
            echo "✅ $job: PASSED" >> security-summary.md
          elif [ "${{ needs.$job.result }}" = "failure" ]; then
            echo "❌ $job: FAILED" >> security-summary.md
          else
            echo "⚠️ $job: ${{ needs.$job.result }}" >> security-summary.md
          fi
        done

        echo "" >> security-summary.md
        echo "## Artifacts Generated" >> security-summary.md
        ls -la || true

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
